summary(model)$coefficients[, "Pr(>|z|)"]
})
immune_names = names(which(res[1,] <= pval_thres)) # select imm -> survival in the graph
length(immune_names)
#Plot Kaplan Meyer curves
selected_vars <- colnames(datIMM)[1:6]
# Data processing
AMR_names = colnames(datAMR)
smoking = ifelse(tcga_data$tobacco==0, 'Non-smoker', 'Smoker')
names(smoking) = rownames(tcga_data$M)
labels = smoking[rownames(datAMR)]
smoking_status = as.numeric(as.factor(labels))
pval_thres = 0.1
# details of each model for publication:
prop100= datIMM[,"Tot. Imm."]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
prop100= datIMM[,"B cells"]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
prop100= datIMM[,"DCs"]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
# Latent factor assessment
cor = apply(LFs, 2, function(x) {
cor.test(x, smoking_status)$p.value
})
# Step 1: Unconditional independence resting
## Tobacco-Survival association: Cox proportional hazards model
SURV_TOB = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~  smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(SURV_TOB)
## Tobacco-Immune associations: Linear regression models
IMMtot_TOB = lm(datIMM[ ,"Tot. Imm."]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(IMMtot_TOB)
IMMbcell_TOB = lm(datIMM[ ,"B cells"]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(IMMbcell_TOB)
IMMDCs_TOB = lm(datIMM[ ,"DCs"]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(IMMDCs_TOB)
AMR_names = tobacco_AMR$AMR_info$AMR
num_res = list()
for (AMR in AMR_names){
for (imm in immune_names) {
pair = paste(AMR, "-", imm, sep = "")
print(paste0("Testing AMR:", AMR, " and Immune:", imm))
# Check consisty of T -> AMR -> S path
#  Check the link between tobacco and the AMR
mod_tob = lm(datAMR[,AMR]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
tob_sign =  summary(mod_tob)$coefficients[2,4]  < pval_thres
#  check the link between the AMR and survival
mod_AMR = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~  datAMR[,AMR] + tcga_data$age + tcga_data$gender +  tcga_data$grade)
AMR_sign =  summary(mod_AMR)$coefficients[1, "Pr(>|z|)"] < pval_thres
# Step 2: Conditional independence testing
if (tob_sign == TRUE & AMR_sign == TRUE) {
print(paste0(" AMR:", AMR, " and Immune:", imm, " is kept for doanwstream analysis. "))
# (Model 1) Which node coefficient will lose its significance between AMR and imm ?
mod_part = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~  datIMM[ ,imm] + datAMR[,AMR]  + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod_part)
part_surv_sign = summary(mod_part)$coefficients[1:2, "Pr(>|z|)"]
# (Model 2) check the link between the immune and smoking status when controlling for AMR
dat = data.frame(
smoking_status = as.numeric(as.factor(labels)) -1,
AMR = datAMR[,AMR],
imm = datIMM[ ,imm],
age = tcga_data$age,
gender = tcga_data$gender,
grade =   tcga_data$grade
)
mod = glm(smoking_status~ ., data = dat, family = binomial(link = "logit"))
summary(mod)
part_imm_sign = summary(mod)$coefficients[2:3,4] # check if imm is significant
num_res[[pair]] = c( part_surv_sign,
part_imm_sign)
names(num_res[[pair]]) = c("part_IMM_sign_to_surv",
"part_AMR_sign_to_surv_when_IMM_controlled",
"part_AMR_sign_to_smoking",
"part_IMM_sign_to_smoking_when_AMR_controlled")
} else {
print(paste0(" AMR:", AMR, " and Immune:", imm, " is not kept for doanwstream analysis. "))
#num_res[[pair]] = c(NA, NA, NA, NA)
#names(num_res[[pair]]) = c("part_IMM_sign_to_surv",
#                            "part_AMR_sign_to_surv_when_IMM_controlled",
#                           "part_AMR_sign_to_smoking",
#                           "part_IMM_sign_to_smoking_when_AMR_controlled")
}
}
}
num_res = do.call(rbind, num_res)
num_res=data.frame(num_res)
# Directed acyclic graph 1
res_CAT1 = num_res[  num_res$part_IMM_sign_to_surv < pval_thres &
num_res$part_AMR_sign_to_surv_when_IMM_controlled < pval_thres, ]
res_CAT1
rownames(res_CAT1)
saveRDS(rownames(res_CAT1), file = "results/05_DAG_validated_CAT1.rds")
# Directed acyclic graph 2
res_CAT2 = num_res[  num_res$part_IMM_sign_to_surv < pval_thres &
num_res$part_AMR_sign_to_surv_when_IMM_controlled >= pval_thres, ]
rownames(res_CAT2)
saveRDS(rownames(res_CAT2), file = "results/05_DAG_validated_CAT2.rds")
# Compute Pearson correlation matrix between LFs and datIMM
cor_matrix_LF <- cor(LFs, datIMM, use = "pairwise.complete.obs", method = "pearson")
# Function to get p-value from Pearson correlation test between two vectors
get_pval <- function(x, y) cor.test(x, y, use = "pairwise.complete.obs", method = "pearson")$p.value
# Vectorized computation of p-values for all combinations of columns in LFs and datIMM
pval_matrix_LF <- outer(
1:ncol(LFs), 1:ncol(datIMM),
Vectorize(function(i, j) get_pval(LFs[, i], datIMM[, j]))
)
# Set row and column names of the p-value matrix to match LFs and datIMM column names
dimnames(pval_matrix_LF) <- list(colnames(LFs), colnames(datIMM))
# Bonferroni adjusted significance threshold
alpha_adj <- 0.01 / (50+ 6) # 50 LFs + 6 immune variables
# Compute Pearson correlation matrix between LFs and datAMR
cor_matrix_AMR <- cor(LFs, datAMR, use = "pairwise.complete.obs", method = "pearson")
# Function to get p-value from Pearson correlation test between two vectors
get_pval <- function(x, y) cor.test(x, y, use = "pairwise.complete.obs", method = "pearson")$p.value
# Vectorized computation of p-values for all combinations of columns in LFs and datAMR
pval_matrix_AMR <- outer(
1:ncol(LFs), 1:ncol(datAMR),
Vectorize(function(i, j) get_pval(LFs[, i], datAMR[, j]))
)
# Set row and column names of the p-value matrix to match LFs and datAMR column names
dimnames(pval_matrix_AMR) <- list(colnames(LFs), colnames(datAMR))
# Bonferroni adjusted significance threshold
alpha_adj <- 0.01 / (50+ 6) # 50 LFs + 6 immune variables
# Convert correlation matrix to a data frame for ggplot
#### SELECT COMBINATIONS :
# Vecteurs de noms
immune_vars <- colnames(datIMM)
amr_vars <- colnames(datAMR)
lf_vars <- colnames(LFs)
# Liste pour stocker les résultats
pairs_list <- list()
# Pour chaque combinaison Immune–AMR
for (immune in immune_vars) {
for (amr in amr_vars) {
# Récupère les corrélations LF vs immune et LF vs amr
#cor_immune <- cor_matrix_LF[, immune]
#cor_amr <- cor_matrix_AMR[, amr]
pval_immune <- pval_matrix_LF[, immune]
pval_amr <- pval_matrix_AMR[, amr]
# Sélectionne les LFs où les deux corrélations sont > 0.4 en valeur absolue
#valid_lfs <- lf_vars[abs(cor_immune) > 0.4 & abs(cor_amr) > 0.4]
valid_lfs <- lf_vars[pval_immune <= alpha_adj & pval_amr <= alpha_adj]
# S'il y a des LFs valides, les stocker
if (length(valid_lfs) > 0) {
pairs_list[[paste( amr,immune, sep = "-")]] <- valid_lfs }
else {
pairs_list[[paste( amr,immune, sep = "-")]] <- NA
}
}
}
# Affiche un exemple
pairs_list[1]
saveRDS(pairs_list, file = "results/05_signLFs_by_pairs-A-I.rds")
select_LF = readRDS("results/05_signLFs_by_pairs-A-I.rds")
View(select_LF)
setwd("~/projects/thema_surv/real_data")
select_LF = readRDS("results/05_signLFs_by_pairs-A-I.rds")
View(select_LF)
setwd("~/projects/tims-pdac/real_data")
select_LF2 = readRDS("results/05_signLFs_by_pairs-A-I.rds")
View(select_LF2)
select_LF = readRDS("results/05_signLFs_by_pairs-A-I.rds")
View(select_LF)
med_tobacco_AMR = readRDS("results/03_tcga_top50_tobacco_AMR_fdr0_05_V2_K8_corrected.rds")
mean_meth_AMR = readRDS("results/03_tcga_mean_meth_AMR_fdr0_05_V2_K8_corrected.rds")
res_med = readRDS("results/02_tcga_med_tobacco_dnam_V2_K8_corrected.rds")
tcga_data = readRDS("results/01_tcga_data_expo_deconv.rds")
X_deconv = tcga_data$X_deconv$Consensus
immune_cells = c("Macrophages","B cells", "T cells", "NK","DCs")
X_immune = X_deconv[rownames(X_deconv) %in% immune_cells,]
immune_cons = t(X_immune)
immune_cons = as.data.frame(immune_cons)
AMRs = colnames(mean_meth_AMR)
mean_meth_AMR = as.data.frame(mean_meth_AMR)
expo = res_med$hdmax2_step1_param$input$exposure_input
covar = res_med$hdmax2_step1_param$input$covar
time = res_med$hdmax2_step1_param$input$survival_time_input
status = res_med$hdmax2_step1_param$input$censoring_status_input
#LF
lfA = res_med$hdmax2_step1_param$AS_1$U[,1]
lfB = res_med$hdmax2_step1_param$AS_1$U[,2]
lfC = res_med$hdmax2_step1_param$AS_1$U[,3]
lfD = res_med$hdmax2_step1_param$AS_1$U[,4]
lfE = res_med$hdmax2_step1_param$AS_1$U[,5]
lfF = res_med$hdmax2_step1_param$AS_1$U[,6]
lfG = res_med$hdmax2_step1_param$AS_1$U[,7]
lfH = res_med$hdmax2_step1_param$AS_1$U[,8]
# pairs list
# DAGvalidated_CAT1 <- readRDS("results/05_DAG_validated_CAT1.rds")
# DAGvalidated_CAT1 <- gsub("_", " ", DAGvalidated_CAT1)
#
# DAGvalidated_CAT2 <- readRDS("results/05_DAG_validated_CAT2.rds")
# DAGvalidated_CAT2 <- gsub("_", " ", DAGvalidated_CAT2)
select_LF = readRDS("results/05_signLFs_by_pairs-A-I.rds")
covars = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3])
# create total immune class
immune_cons$all = rowSums(immune_cons)
DAGvalidated_CAT1 <- readRDS("results/05_DAG_validated_CAT1_withLF_2.rds")
DAGvalidated_CAT1 <- gsub("_", " ", DAGvalidated_CAT1)
# AMR 5 B cells
mean_meth_AMR_temp = mean_meth_AMR$AMR5
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`B cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_AMR5_BC <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
source("surv_serial_mediation_V2.R")
library(dplyr)
set.seed(123)
mean_meth_AMR_temp = mean_meth_AMR$AMR5
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`B cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_AMR5_BC <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation__AMR5_BC$feat = c(rep("AMR5_B cells",5))
res_mediation_AMR5_BC$feat = c(rep("AMR5_B cells",5))
res = as.data.frame(res_mediation_AMR5_BC)
View(med_tobacco_AMR)
View(res)
# AMR 5 T cells
mean_meth_AMR_temp = mean_meth_AMR$AMR5
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3], lfB)
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR5_TC",5))
res = rbind(res, res_mediation_temp)
View(res)
mean_meth_AMR_temp = mean_meth_AMR$AMR9
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR9_TC",5))
res = rbind(res, res_mediation_temp)
View(res)
# AMR 11 bc
mean_meth_AMR_temp = mean_meth_AMR$AMR11
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`B cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
View(res)
res_mediation_temp$feat = c(rep("AMR11_BC",5))
res = rbind(res, res_mediation_temp)
# AMR 9  all
mean_meth_AMR_temp = mean_meth_AMR$AMR9
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR9_all",5))
res = rbind(res, res_mediation_temp)
mean_meth_AMR_temp = mean_meth_AMR$AMR11
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR11_TC",5))
res = rbind(res, res_mediation_temp)
# AMR 11 all
mean_meth_AMR_temp = mean_meth_AMR$AMR11
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR11_all",5))
res = rbind(res, res_mediation_temp)
# AMR 12 BC
mean_meth_AMR_temp = mean_meth_AMR$AMR12
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`B cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR12_BC",5))
res = rbind(res, res_mediation_temp)
mean_meth_AMR_temp = mean_meth_AMR$AMR15
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3], lfA, lfB, lfH)
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR15_all",5))
res = rbind(res, res_mediation_temp)
# AMR 17 TC
mean_meth_AMR_temp = mean_meth_AMR$AMR17
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3], lfB)
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR17_TC",5))
res = rbind(res, res_mediation_temp)
# AMR 17 all
mean_meth_AMR_temp = mean_meth_AMR$AMR17
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3], lfA, lfB)
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR17_all",5))
res = rbind(res, res_mediation_temp)
# AMR 19 TC
mean_meth_AMR_temp = mean_meth_AMR$AMR19
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3], lfB)
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR19_TC",5))
res = rbind(res, res_mediation_temp)
# AMR 20 TC
mean_meth_AMR_temp = mean_meth_AMR$AMR19
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR20_TC",5))
res = rbind(res, res_mediation_temp)
mean_meth_AMR_temp = mean_meth_AMR$AMR19
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR20_all",5))
res = rbind(res, res_mediation_temp)
# AMR 20 TC
mean_meth_AMR_temp = mean_meth_AMR$AMR20
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`T cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
res_mediation_temp$feat = c(rep("AMR20_TC",5))
res = rbind(res, res_mediation_temp)
# AMR 20 all
mean_meth_AMR_temp = mean_meth_AMR$AMR20
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$all
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_temp <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
View(res)
View(res)
res_mediation_temp$feat = c(rep("AMR20_all",5))
res = rbind(res, res_mediation_temp)
gc()
