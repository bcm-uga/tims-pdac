theme(
strip.background = element_blank(),
strip.text = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"),
)
p_man
# save plot
ggsave("figures/03_TCGA_tobacco_AMR_fdr0_05_man_V2_K8_corrected.pdf", p_man, width = 12, height = 5, units = "in")
####################################
## acme plot
####################################
amr$acme_pval <- med_tobacco_dnam_AMR$step2_res_50$pval
amr$CI_2.5 <- med_tobacco_dnam_AMR$step2_res_50$CI_2.5
amr$CI_97.5 <- med_tobacco_dnam_AMR$step2_res_50$CI_97.5
amr$signif <- ifelse(amr$acme_pval <= 0.05, "pval <= 0.05", "n.s.")
amr$amr_id = med_tobacco_dnam_AMR$step2_res_50$feat
amr$surv_dist = med_tobacco_dnam_AMR$all_step2_res$effects$univariate$best_distribution
ordered_amr_feat <- amr$amr_id[order(amr$est)]
# pseudo log version
p_ACME_log <- ggplot(amr, aes(
x     = est,
y     = factor(amr_id, levels = ordered_amr_feat),
color = surv_dist,
#color = est <= 0,
shape = signif
)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_errorbarh(aes(xmin = CI_2.5, xmax = CI_97.5), height = 0.3) +
geom_point(size = 2.8) +
theme_bw() +
labs(
title = "A. ACME (Average Causal Mediation Effect)",
y     = "Mediators",
x     = "Effect (pseudo-log10)"
) +
scale_color_manual(
values = c("magenta3", "mediumseagreen" , "orange2"),
name   = "Survival distribution"
)+
scale_shape_manual(
values = c("pval <= 0.05" = 16, "n.s." = 17),
guide  = guide_legend(title = "Significance")
) +
scale_x_continuous(
trans   = pseudo_log_trans(base = 10),
breaks  = c(-100, -10, -1, 0, 1, 10, 100),
labels  = function(x) x
)
ggsave(
"figures/03_TCGA_tobacco_AMR_acme_pseudolog.pdf",
p_ACME_log,
width  = 6,
height = 8,
units  = "in"
)
####################################################
# Indirect effect decomposition
######################################################
amr$XM_est = med_tobacco_dnam_AMR$all_step2_res$effects$univariate$xm$Estimate
amr$MY_est = med_tobacco_dnam_AMR$all_step2_res$effects$univariate$my$Estimate
box <- data.frame(name = c("Smoking", "Survival"),
X = c(3.6,6.4),  # before it was 0 and 10
Y = c(0, 0))
med <- subset(amr, acme_pval <= 0.05)
med <- med[order(-med$est), ]
med$X <- 5
med$Y <- seq(10, -10, length.out = nrow(med))
# from tobacco to genes
med$X_XM_seg_s <- 3.6
med$Y_XM_seg_s <- 0
med$X_XM_seg_e <- 4.8
med$Y_XM_seg_e <- med$Y
# from genes to survival
med$X_MY_seg_s <- 5.2
med$Y_MY_seg_s <- med$Y
med$X_MY_seg_e <- 6.4
med$Y_MY_seg_e <- 0
# Colors and styles
med$fill_acme <- ifelse(med$est <= 0, "Negative", "Positive")
med$col_xm <- ifelse(med$XM_est <= 0, "Negative", "Positive")
med$col_my <- ifelse(med$MY_est <= 0, "Negative", "Positive")
# plot
plot_decompo = ggplot() +
geom_segment(
data = med,
aes(
x = X_XM_seg_s,
y = Y_XM_seg_s,
xend = X_XM_seg_e,
yend = Y_XM_seg_e,
col = col_xm
),
size = 1
) +
geom_segment(
data = med,
aes(
x = X_MY_seg_s,
y = Y_MY_seg_s,
xend = X_MY_seg_e,
yend = Y_MY_seg_e,
col = col_my
),
size = 1
) +
geom_label(
data = box,
aes(X, Y, label = name),
size = 7,
fontface = "bold"
) +
geom_label(
data = med,
aes(X, Y, label = amr_id, fill = fill_acme),
fontface = "italic",
size = 5
) +
scale_color_manual(values = c("red", "skyblue")) +
scale_fill_manual(values = c("mistyrose", "aliceblue")) +
labs(color = "Regression coeff sign", fill = "Indirect Effect (ACME)") +
coord_cartesian(clip = "off") +
expand_limits(x = c(3.3, 6.7)) +
theme_void() +
theme(
legend.position = c(0.05, 0.95),
# top left
legend.justification = c("left", "top"),
legend.text = element_text(size = 12),
legend.title = element_text(size = 10)
)
ggsave("figures/03_ACME_effect_decomposition.pdf",plot_decompo, height = 10, width = 7)
library(reshape2)
deconv = readRDS("tcga_pdac_mediation/results/01_tcga_data_expo_deconv.rds")
mean_meth_AMR = readRDS("results/03_tcga_top50_tobacco_AMR_fdr0_05_V2_K8_corrected.rds")
mean_meth_AMR = mean_meth_AMR$mean_meth_mat
X_deconv = deconv$X_deconv$Consensus
immune_cells = c("Macrophages","B cells", "T cells", "NK","DCs")
X_immune = X_deconv[rownames(X_deconv) %in% immune_cells,]
immune_cons = t(X_immune)
dim(mean_meth_AMR)
dim(immune_cons)
cor_matrix <- cor(mean_meth_AMR, immune_cons, use = "pairwise.complete.obs", method = "pearson")
library(reshape2)
deconv = readRDS("tcga_pdac_mediation/results/01_tcga_data_expo_deconv.rds")
mean_meth_AMR = readRDS("results/03_tcga_top50_tobacco_AMR_fdr0_05_V2_K8_corrected.rds")
mean_meth_AMR = mean_meth_AMR$mean_meth_mat
X_deconv = deconv$X_deconv$Consensus
immune_cells = c("Macrophages","B cells", "T cells", "NK","DCs")
X_immune = X_deconv[rownames(X_deconv) %in% immune_cells,]
immune_cons = t(X_immune)
dim(mean_meth_AMR)
dim(immune_cons)
cor_matrix <- cor(mean_meth_AMR, immune_cons, use = "pairwise.complete.obs", method = "pearson")
################
### Figure 4 ###
################
library(survival)
library(survminer)
library(gridExtra)
library(ggplot2)
library(ComplexHeatmap)
### Load and process data
# Load the TCGA-PAAD data
tcga_data = readRDS("real_data/results/01_tcga_data_expo_deconv.rds") # Load the TCGA-PAAD data
# Load the immune cell-type estimation
datIMM = read.csv2("real_data/results/03_tcga_consensus_deconv_immune_cells.csv", header = TRUE, stringsAsFactors = FALSE, row.names = 1, sep = ",")
datIMM[] <- lapply(datIMM, function(x) as.numeric(as.character(x)))
datIMM$all = rowSums(datIMM)
colnames(datIMM) = c("Macrophages", "B cells", "T cells", "NK", "DCs", "Tot. Imm." )
# Load the significant AMR results
tobacco_AMR <- readRDS("real_data/results/03_tcga_significative_from_top50_tobacco_AMR_fdr0_05_V2_K8_corrected.rds")
AMR_names = tobacco_AMR$AMR_info$AMR
# Load the AMR results (methylation value per AMR)
datAMR = read.csv2("real_data/results/03_tcga_AMR_mean_meth_top50_fdr0_05_V2_K8_corrected.csv", header = TRUE, stringsAsFactors = FALSE, row.names = 1, sep = ",")
datAMR[] <- lapply(datAMR, function(x) as.numeric(as.character(x)))
# Process the smoking variable from TCGA-PAAD metadata
smoking = ifelse(tcga_data$tobacco==0, 'Non-smoker', 'Smoker')
names(smoking) = rownames(tcga_data$M)
labels = smoking[rownames(datAMR)]
smoking_status = as.numeric(as.factor(labels))
#Latent factor composition and correlation
res_med = readRDS("real_data/results/02_tcga_med_tobacco_dnam_V2_K8_corrected.rds")
LFs = res_med$hdmax2_step1_param$AS_1$U
colnames(LFs) = paste0("LF_", c("A", "B", "C", "D", "E", "F", "G", "H"))
pairs_list = readRDS("real_data/results/05_signLFs_by_pairs-A-I.rds")
### PANEL A: TCGA-PAAD heatmap of deconvolution results
X_deconv = as.data.frame(t(tcga_data$X_deconv$Consensus))
X_deconv$TotalImmune = c(tcga_data$prop_immune)
range(X_deconv)
X_deconv = X_deconv[,c("TotalImmune","B cells","T cells","DCs","NK","Neutrophils","Macrophages",
"Endothelial","Fibroblasts",
"Cancer basal","Cancer classical")]
colnames(X_deconv) = c("Tot. Imm.","B cells","T cells","DCs","NK","Neutrophils","Macrophages",
"Endothelial","Fibroblasts",
"Cancer basal","Cancer classical")
Z_score = apply(X_deconv, 2, function(x) (x-mean(x, na.rm=T))/sd(x, na.rm=T))
range(Z_score, na.rm=T)
# Annotation pre processing
gender = ifelse(tcga_data$gender == 1, "male", "female")
grade = tcga_data$grade
stopifnot(length(gender) == nrow(Z_score))
stopifnot(length(grade) == nrow(Z_score))
# Row annotation
row_anno = rowAnnotation(
Gender = gender,
Grade = grade,
col = list(
Gender = c("male" = "brown", "female" = "yellow"),
Grade = structure(RColorBrewer::brewer.pal(length(unique(grade)), "Set2"),
names = unique(grade))
),
show_annotation_name = TRUE
)
pdf("figures/fig4_panelA.pdf", width = 4, height =4)
ComplexHeatmap::Heatmap(Z_score[,colnames(Z_score) != 'Neutrophils'],
cluster_rows = T,
show_row_names = F,
cluster_columns = F,
left_annotation = row_anno)
dev.off()
### PANEL B: survival curves for immune cell types
# Run cox model and select significant immmune features
pval_thres = 0.15
res = apply(datIMM, 2, function(x) {
model = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ x + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(model)$coefficients[, "Pr(>|z|)"]
})
print(res)
immune_names = names(which(res[1,] <= pval_thres)) # select imm -> survival in the graph
length(immune_names)
# Plot Kaplan-Meier
selected_vars <- colnames(datIMM)[1:6]
plots <- list()
time_in_months <- tcga_data$time / 30.44  # 1 month ≈ 30.44 jours
for (var in selected_vars) {
# Dichotomize based on the median
group <- ifelse(datIMM[[var]] >= median(datIMM[[var]], na.rm = TRUE), "High", "Low")
group <- factor(group, levels = c("Low", "High"))
plot_data <- data.frame(time = time_in_months, event = tcga_data$status, group = group)
# Créer l'objet de survie
surv_obj <- survival::Surv(time = time_in_months, event = tcga_data$status)
# Kaplan-Meier survival estimation
fit <- survival::survfit(surv_obj ~ group)
# Plot
p <- ggsurvplot(
fit,
data = plot_data,
risk.table = FALSE,
pval = TRUE,
title = var,
legend.title = var,
legend.labs = c("Low", "High"),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Time (months)"
)
plots[[var]] <- p
}
#  Display the 6 survival curves in a 2x3 grid
combined_plot = arrange_ggsurvplots(plots, ncol = 3, nrow = 2)
ggsave("figures/fig4_panelB.pdf", plot = combined_plot, width = 8, height = 5, dpi = 300)
### PANEL C: Causal discovery
pval_thres = 0.1
# details of each model for publication:
prop100= datIMM[,"Tot. Imm."]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
prop100= datIMM[,"B cells"]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
prop100= datIMM[,"DCs"]*100 #to interpret the HR has increase of 1 unit (1% of immune infiltration) lead to HR likely to dire than persons with 1% less
mod = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ prop100 + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(mod)
# Latent factor assessment
surv_LF = apply(LFs, 2, function(x) {
survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~ x)
})
surv_LF
tob_LF = apply(LFs, 2, function(x) {
cor.test(x, smoking_status)$p.value
})
tob_LF
# Step 1: Unconditional independence resting
## Tobacco-Survival association: Cox proportional hazards model
SURV_TOB = survival::coxph(survival::Surv(tcga_data$time, tcga_data$status) ~  smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade )
summary(SURV_TOB)
## Tobacco-Immune associations: Linear regression models
IMMtot_TOB = lm(datIMM[ ,"Tot. Imm."]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade )
summary(IMMtot_TOB)
IMMbcell_TOB = lm(datIMM[ ,"B cells"]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade )
summary(IMMbcell_TOB)
IMMDCs_TOB = lm(datIMM[ ,"DCs"]~smoking_status + tcga_data$age + tcga_data$gender +  tcga_data$grade)
summary(IMMDCs_TOB)
AMR_names = tobacco_AMR$AMR_info$AMR
num_res = list()
for (AMR in AMR_names){
for (imm in immune_names) {
pair = paste(AMR, "-", imm, sep = "")
print(paste0("Testing AMR:", AMR, " and Immune:", imm))
# Get significant LFs
LFs_names = pairs_list[[pair]]
covar =   data.frame(age = tcga_data$age,
gender = tcga_data$gender,
grade =   tcga_data$grade
)
if (is.na(LFs_names[1])) {
print(paste0("No significant LFs for pair: ", pair))
} else {
print(paste0("Significant LFs for pair: ", pair, " are: ", paste(LFs_names, collapse = ", ")))
covar = cbind(covar, LFs[, LFs_names, drop = FALSE])
}
# Check consisty of T -> AMR -> S path
#  Check the link between tobacco and the AMR
df_model <- data.frame(
y = datAMR[, AMR],
smoking_status = smoking_status,
covar
)
mod_tob <- lm(y ~ ., data = df_model)
tob_sign =  summary(mod_tob)$coefficients[2,4]  < pval_thres
#  check the link between the AMR and survival
df_model <- data.frame(
y = datAMR[, AMR],
time = tcga_data$time,
status = tcga_data$status,
covar)
mod_AMR <- survival::coxph(
survival::Surv(time, status) ~ y +  .,
data = df_model
)
AMR_sign =  summary(mod_AMR)$coefficients[1, "Pr(>|z|)"] < pval_thres
# Step 2: Conditional independence testing
if (tob_sign == TRUE & AMR_sign == TRUE) {
print(paste0(" AMR:", AMR, " and Immune:", imm, " is kept for doanwstream analysis. "))
# (Model 1) Which node coefficient will lose its significance between AMR and imm ?
df_model <- data.frame(
time = tcga_data$time,
status = tcga_data$status,
imm = datIMM[[imm]],
amr = datAMR[[AMR]],
covar
)
mod_part <- survival::coxph(
survival::Surv(time, status) ~ imm + amr +  .,
data = df_model
)
part_surv_sign = summary(mod_part)$coefficients[1:2, "Pr(>|z|)"]
# (Model 2) check the link between the immune and smoking status when controlling for AMR
df_model <- data.frame(
smoking_status = as.numeric(as.factor(labels)) -1,
AMR = datAMR[,AMR],
imm = datIMM[ ,imm],
covar
)
mod = glm(smoking_status~ ., data = df_model, family = binomial(link = "logit"))
summary(mod)
part_imm_sign = summary(mod)$coefficients[2:3,4] # check if imm is significant
num_res[[pair]] = c( part_surv_sign,
part_imm_sign)
names(num_res[[pair]]) = c("part_IMM_sign_to_surv",
"part_AMR_sign_to_surv_when_IMM_controlled",
"part_AMR_sign_to_smoking",
"part_IMM_sign_to_smoking_when_AMR_controlled")
} else {
print(paste0(" AMR:", AMR, " and Immune:", imm, " is not kept for doanwstream analysis. "))
#num_res[[pair]] = c(NA, NA, NA, NA)
#names(num_res[[pair]]) = c("part_IMM_sign_to_surv",
#                            "part_AMR_sign_to_surv_when_IMM_controlled",
#                           "part_AMR_sign_to_smoking",
#                           "part_IMM_sign_to_smoking_when_AMR_controlled")
}
}
}
num_res = do.call(rbind, num_res)
num_res=data.frame(num_res)
# Directed acyclic graph 1
res_CAT1 = num_res[  num_res$part_IMM_sign_to_surv < pval_thres &
num_res$part_AMR_sign_to_surv_when_IMM_controlled < pval_thres, ]
res_CAT1
rownames(res_CAT1)
# Directed acyclic graph 2
res_CAT2 = num_res[  num_res$part_IMM_sign_to_surv < pval_thres &
num_res$part_AMR_sign_to_surv_when_IMM_controlled >= pval_thres, ]
rownames(res_CAT2)
plot_part_cor = function(mat){
colnames(mat) = c("Model 1: S~I+A+C, (pval I)",
"Model 1: S~I+A+C, (pval A)",
"Model 2: T~I+A+C, (pval A)",
"Model 2: T~I+A+C, (pval I)")
df <- data.frame(
cell_type = rep(rownames(mat), times = ncol(mat)),
variable = rep(colnames(mat), each = nrow(mat)),
value = as.vector(as.matrix(mat))
)
df$abs_value <- abs(df$value)
df$significance <- ifelse(df$value <= 0.1, "Significant", "Not Significant")
p = ggplot(df, aes(x = variable, y = cell_type,
size = abs_value,
color = value,
shape = significance)) +
geom_point() +
scale_size(range = c(2, 8)) +
scale_color_gradient(low = "darkblue", high = "lightblue") +
scale_shape_manual(values = c("Significant" = 16, "Not Significant" = 17)) +  # 16 = rond, 17 = triangle
theme_minimal() +
labs(
title = "Partial correlation",
x = "Linear models",
y = "Pairs",
color = "P-value",
size = "Intensity",
shape = "Significativity"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
pdf("figures/fig4_panelC1.pdf", width = 5, height =5)
plot_part_cor(mat = res_CAT1)
dev.off()
pdf("figures/fig4_panelC2.pdf", width = 5, height =5)
plot_part_cor(mat = res_CAT2)
dev.off()
pairs_list = readRDS("real_data/results/05_signLFs_by_pairs-A-I.rds")
pairs_list
setwd("~/projects/tims-pdac")
tcga_data_deconv = readRDS("results/01_tcga_data_expo_deconv.rds")
tcga_data_deconv = readRDS("results/01_tcga_data_expo_deconv.rds")
sex = tcga_data_deconv$gender
age = tcga_data_deconv$age
grade = tcga_data_deconv$grade
covar = cbind(sex, age, grade)
covar_df = as.data.frame(covar)
M = tcga_data_deconv$M
# Créer la matrice des résidus vide
res_mat <- matrix(NA, nrow = nrow(M), ncol = ncol(M))
colnames(res_mat) <- colnames(M)
rownames(res_mat) <- rownames(M)
# Boucle sur chaque CpG
for (j in seq_len(ncol(M))) {
y <- M[, j]
mod <- lm(y ~ ., data = covar_df)  # ajustement sur toutes les covariables
res_mat[, j] <- resid(mod)         # résidus du modèle
}
pca <- prcomp(res_mat, center = FALSE, scale. = FALSE)
pdf("figures/01_TCGA_scree_plot.pdf", width = 7, height = 5)
plot((pca$sdev^2/sum(pca$sdev^2))[1:10],
type = "b",
xlab = 'Principal Component',
ylab = "Explained variance",
main = "PCA on adjusted TCGA methylation matrix")
pdf("figures/01_TCGA_scree_plot.pdf", width = 7, height = 5)
plot((pca$sdev^2/sum(pca$sdev^2))[1:10],
type = "b",
xlab = 'Principal Component',
ylab = "Explained variance",
main = "PCA on adjusted TCGA methylation matrix")
# ton objet ggplot
dev.off()
med_tobacco_AMR = readRDS("results/03_tcga_top50_tobacco_AMR_fdr0_05_V2_K8_corrected.rds")
mean_meth_AMR = readRDS("results/03_tcga_mean_meth_AMR_fdr0_05_V2_K8_corrected.rds")
res_med = readRDS("results/02_tcga_med_tobacco_dnam_V2_K8_corrected.rds")
tcga_data = readRDS("results/01_tcga_data_expo_deconv.rds")
X_deconv = tcga_data$X_deconv$Consensus
immune_cells = c("Macrophages","B cells", "T cells", "NK","DCs")
X_immune = X_deconv[rownames(X_deconv) %in% immune_cells,]
immune_cons = t(X_immune)
immune_cons = as.data.frame(immune_cons)
AMRs = colnames(mean_meth_AMR)
mean_meth_AMR = as.data.frame(mean_meth_AMR)
expo = res_med$hdmax2_step1_param$input$exposure_input
covar = res_med$hdmax2_step1_param$input$covar
time = res_med$hdmax2_step1_param$input$survival_time_input
status = res_med$hdmax2_step1_param$input$censoring_status_input
#LF
lfA = res_med$hdmax2_step1_param$AS_1$U[,1]
lfB = res_med$hdmax2_step1_param$AS_1$U[,2]
lfC = res_med$hdmax2_step1_param$AS_1$U[,3]
lfD = res_med$hdmax2_step1_param$AS_1$U[,4]
lfE = res_med$hdmax2_step1_param$AS_1$U[,5]
lfF = res_med$hdmax2_step1_param$AS_1$U[,6]
lfG = res_med$hdmax2_step1_param$AS_1$U[,7]
lfH = res_med$hdmax2_step1_param$AS_1$U[,8]
# pairs list
# DAGvalidated_CAT1 <- readRDS("results/05_DAG_validated_CAT1.rds")
# DAGvalidated_CAT1 <- gsub("_", " ", DAGvalidated_CAT1)
#
# DAGvalidated_CAT2 <- readRDS("results/05_DAG_validated_CAT2.rds")
# DAGvalidated_CAT2 <- gsub("_", " ", DAGvalidated_CAT2)
select_LF = readRDS("results/05_signLFs_by_pairs-A-I.rds")
covars = data.frame(grade = covar[,1], age = covar[,2], gender = covar[,3])
# create total immune class
immune_cons$all = rowSums(immune_cons)
DAGvalidated_CAT1 <- readRDS("results/05_DAG_validated_CAT1_withLF_2.rds")
DAGvalidated_CAT1 <- gsub("_", " ", DAGvalidated_CAT1)
# AMR 5 B cells
mean_meth_AMR_temp = mean_meth_AMR$AMR5
mean_meth_AMR_temp = as.matrix(mean_meth_AMR_temp)
immune_cons_temp = immune_cons$`B cells`
immune_cons_temp = as.matrix(immune_cons_temp)
covars_LF = covars
res_mediation_AMR5_BC <- run_serial_mediation_grid2_alter(
mat_dmr = mean_meth_AMR_temp,
mat_cell = immune_cons_temp,
expo = expo,
covars_LF = covars_LF,
covars = covars,
time = time,
status = status,
R = 1000  # pour aller plus vite
)
stop()... =
